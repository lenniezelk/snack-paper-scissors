local global = require("main.global")
local round_anim_period = 2
local celebrate_anim_period = 1

local function show_enemy_choice(self)
	rive.databind.set_properties('#rivemodel', self.handle, {
		['enemy selection/isVisible'] = true,
		['enemy selection/selection'] = global.game_state.enemy_choice,
	})
end

local function hide_enemy_choice(self)
	rive.databind.set_properties('#rivemodel', self.handle, {
		['enemy selection/isVisible'] = false,
	})
end

local function go_to_result(self)
	global.calculate_final_result()
	msg.post("loader:/go#loader", "go_to_result")
end

local function go_to_next_round(self)
	global.advance_to_next_round()
	msg.post("loader:/go#loader", "go_to_round")
end

local function celebrate_win(self)
	if global.game_state.result == 'WON' then
		rive.databind.set_properties('#rivemodel', self.handle, {
			['bunny/celebrate/isCelebrating'] = true,
		})
		timer.delay(celebrate_anim_period, false, function()
			rive.databind.set_properties('#rivemodel', self.handle, {
				['bunny/celebrate/isCelebrating'] = false,
			})
		end)
	elseif global.game_state.result == 'LOST' then
		rive.databind.set_properties('#rivemodel', self.handle, {
			['froggy/celebrate/isCelebrating'] = true,
		})
		timer.delay(celebrate_anim_period, false, function()
			rive.databind.set_properties('#rivemodel', self.handle, {
				['froggy/celebrate/isCelebrating'] = false,
			})
		end)
	end
end

local function rive_event_handler(self, message_id, message)
	hide_enemy_choice(self)
	if message.name == 'Paper Btn Clicked' then
		global.handle_player_choice('PAPER')
	elseif message.name == 'Rock Btn Clicked' then
		global.handle_player_choice('ROCK')
	elseif message.name == 'Scissors Btn Clicked' then
		global.handle_player_choice('SCISSORS')
	end
	show_enemy_choice(self)
	celebrate_win(self)
	if global.is_round_over() then
		if global.is_final_round() then
			go_to_result(self)
		else
			go_to_next_round(self)
		end
	end
end

function init(self)
	-- Set background color using utility method
	global.set_background_color("FFEFC3")
	global.update_state({ level = 'main' })
	msg.post(".", "acquire_input_focus")
	rive.play_state_machine("#rivemodel", "State Machine 1", nil, rive_event_handler)
	self.handle = rive.databind.create_view_model_instance_runtime("#rivemodel", "GamePlay")
	rive.databind.set_view_model_instance_runtime("#rivemodel", self.handle)
end

-- Enable rive input for the model.
function on_input(self, action_id, action)
	if not action_id or action_id == hash("touch") then
		if action.pressed then
			rive.pointer_down("#rivemodel", action.x, action.y)
		elseif action.released then
			rive.pointer_up("#rivemodel", action.x, action.y)
		else
			rive.pointer_move("#rivemodel", action.x, action.y)
		end
	end
end
